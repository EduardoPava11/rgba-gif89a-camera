name: Device Matrix Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'instrumented'
        type: choice
        options:
          - instrumented
          - macrobenchmark
          - robo

jobs:
  device-tests:
    name: Firebase Test Lab
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi
          
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
        
      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27
          add-to-path: true
          
      - name: Build Rust libraries
        run: |
          cd rust-core/m1fast
          ANDROID_NDK_HOME=$ANDROID_NDK_ROOT cargo ndk \
            --target aarch64-linux-android \
            --target armv7-linux-androideabi \
            --platform 26 \
            build --release
            
      - name: Copy Rust libraries
        run: |
          mkdir -p app/src/main/jniLibs/{arm64-v8a,armeabi-v7a}
          cp rust-core/target/aarch64-linux-android/release/libm1fast.so app/src/main/jniLibs/arm64-v8a/
          cp rust-core/target/armv7-linux-androideabi/release/libm1fast.so app/src/main/jniLibs/armeabi-v7a/
          
      - name: Build APKs for testing
        run: |
          ./gradlew assembleDebug assembleDebugAndroidTest
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.FIREBASE_TEST_LAB_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Run instrumented tests on device matrix
        if: ${{ github.event.inputs.test_type == 'instrumented' || github.event_name != 'workflow_dispatch' }}
        run: |
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=oriole,version=34,locale=en,orientation=portrait \
            --device model=redfin,version=30,locale=en,orientation=portrait \
            --device model=a10,version=29,locale=en,orientation=portrait \
            --device model=bluejay,version=33,locale=en,orientation=portrait \
            --test-targets "package com.rgbagif.pipeline,package com.rgbagif.performance" \
            --timeout 30m \
            --results-dir=${{ github.run_number }} \
            --results-bucket=${{ secrets.FIREBASE_TEST_LAB_RESULTS_BUCKET }} \
            --environment-variables enablePerfetto=true,benchmarkMode=true
            
      - name: Run Macrobenchmark on physical devices
        if: ${{ github.event.inputs.test_type == 'macrobenchmark' }}
        run: |
          # Build benchmark APK
          ./gradlew :macrobenchmark:assembleAndroidTest
          
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/release/app-release.apk \
            --test macrobenchmark/build/outputs/apk/androidTest/release/macrobenchmark-release-androidTest.apk \
            --device model=oriole,version=34,locale=en,orientation=portrait \
            --device model=redfin,version=30,locale=en,orientation=portrait \
            --test-targets "class com.rgbagif.macrobenchmark.StartupBenchmark,class com.rgbagif.macrobenchmark.GifExportBenchmark" \
            --timeout 45m \
            --results-dir=benchmark-${{ github.run_number }} \
            --results-bucket=${{ secrets.FIREBASE_TEST_LAB_RESULTS_BUCKET }} \
            --environment-variables clearPackageData=true,additionalTestOutputDir=/sdcard/Download
            
      - name: Run Robo test
        if: ${{ github.event.inputs.test_type == 'robo' }}
        run: |
          gcloud firebase test android run \
            --type robo \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --device model=oriole,version=34,locale=en,orientation=portrait \
            --device model=redfin,version=30,locale=en,orientation=portrait \
            --timeout 15m \
            --results-dir=robo-${{ github.run_number }} \
            --results-bucket=${{ secrets.FIREBASE_TEST_LAB_RESULTS_BUCKET }}
            
      - name: Download test results
        if: always()
        run: |
          mkdir -p test-results
          gsutil -m cp -r gs://${{ secrets.FIREBASE_TEST_LAB_RESULTS_BUCKET }}/${{ github.run_number }}/* test-results/ || true
          gsutil -m cp -r gs://${{ secrets.FIREBASE_TEST_LAB_RESULTS_BUCKET }}/benchmark-${{ github.run_number }}/* test-results/ || true
          gsutil -m cp -r gs://${{ secrets.FIREBASE_TEST_LAB_RESULTS_BUCKET }}/robo-${{ github.run_number }}/* test-results/ || true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: firebase-test-lab-results
          path: test-results/

  performance-regression:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: device-tests
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download current results
        uses: actions/download-artifact@v3
        with:
          name: firebase-test-lab-results
          path: current-results
          
      - name: Download baseline results
        run: |
          # Download baseline from main branch artifacts
          # This would need to be implemented based on your storage solution
          echo "Downloading baseline performance metrics..."
          
      - name: Compare performance metrics
        run: |
          # Parse benchmark results and compare
          # Look for regressions in:
          # - M1_JNI_WRITE times
          # - CBOR_ENCODE times  
          # - GIF export times
          # - Startup times
          
          # Example threshold check
          python3 -c "
          import json
          import sys
          
          # This would parse actual benchmark JSON files
          current_jni_ms = 15  # Mock value
          baseline_jni_ms = 10  # Mock value
          
          regression_threshold = 1.2  # 20% regression threshold
          
          if current_jni_ms > baseline_jni_ms * regression_threshold:
              print(f'‚ùå Performance regression detected: JNI write {current_jni_ms}ms vs baseline {baseline_jni_ms}ms')
              sys.exit(1)
          else:
              print(f'‚úÖ Performance check passed: JNI write {current_jni_ms}ms vs baseline {baseline_jni_ms}ms')
          "
          
      - name: Post results to PR
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            // Parse benchmark results and post to PR
            const fs = require('fs');
            
            // Mock performance data - would be parsed from actual results
            const metrics = {
              jniWriteMs: 15,
              uniffiWriteMs: 32,
              quantizationMs: 250,
              gifExportMs: 1500,
              startupMs: 800
            };
            
            const comment = `## üìä Performance Results
            
            | Metric | Time (ms) | vs Baseline | Status |
            |--------|-----------|-------------|--------|
            | JNI Write | ${metrics.jniWriteMs} | +5% | ‚úÖ |
            | UniFFI Write | ${metrics.uniffiWriteMs} | -2% | ‚úÖ |
            | Quantization | ${metrics.quantizationMs} | +1% | ‚úÖ |
            | GIF Export | ${metrics.gifExportMs} | -3% | ‚úÖ |
            | Cold Startup | ${metrics.startupMs} | +2% | ‚úÖ |
            
            ### Device Matrix Results
            ‚úÖ All tests passed on:
            - Pixel 6 (API 34)
            - Pixel 5 (API 30)  
            - Samsung A10 (API 29)
            - Pixel 6a (API 33)
            
            [View full results in Firebase Test Lab](https://console.firebase.google.com/project/_/testlab/histories/)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });